{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "containerGroupName": {
      "type": "string",
      "defaultValue": "onetech-frontend",
      "metadata": {
        "description": "Name for the container group"
      }
    },
    "containerImageName": {
      "type": "string",
      "metadata": {
        "description": "Container image name (e.g., your-registry.azurecr.io/onetech-frontend:latest)"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "registryServer": {
      "type": "string",
      "metadata": {
        "description": "Container registry server (e.g., your-registry.azurecr.io)"
      }
    },
    "registryUsername": {
      "type": "string",
      "metadata": {
        "description": "Container registry username"
      }
    },
    "registryPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Container registry password"
      }
    },
    "backendApiUrl": {
      "type": "string",
      "metadata": {
        "description": "Backend API URL"
      }
    },
    "mongodbUri": {
      "type": "securestring",
      "metadata": {
        "description": "MongoDB connection string"
      }
    },
    "nextAuthSecret": {
      "type": "securestring",
      "metadata": {
        "description": "NextAuth secret key"
      }
    }
  },
  "variables": {},
  "resources": [
    {
      "name": "[parameters('containerGroupName')]",
      "type": "Microsoft.ContainerInstance/containerGroups",
      "apiVersion": "2021-09-01",
      "location": "[parameters('location')]",
      "properties": {
        "containers": [
          {
            "name": "onetech-frontend",
            "properties": {
              "image": "[parameters('containerImageName')]",
              "ports": [
                {
                  "port": 3000,
                  "protocol": "TCP"
                }
              ],
              "environmentVariables": [
                {
                  "name": "NEXT_PUBLIC_API_URL",
                  "value": "[parameters('backendApiUrl')]"
                },
                {
                  "name": "MONGODB_URI",
                  "secureValue": "[parameters('mongodbUri')]"
                },
                {
                  "name": "NEXTAUTH_SECRET",
                  "secureValue": "[parameters('nextAuthSecret')]"
                },
                {
                  "name": "NEXTAUTH_URL",
                  "value": "[concat('http://', parameters('containerGroupName'), '-', uniqueString(resourceGroup().id), '.', parameters('location'), '.azurecontainer.io:3000')]"
                },
                {
                  "name": "NODE_ENV",
                  "value": "production"
                }
              ],
              "resources": {
                "requests": {
                  "cpu": 1.0,
                  "memoryInGB": 2.0
                }
              }
            }
          }
        ],
        "osType": "Linux",
        "restartPolicy": "Always",
        "imageRegistryCredentials": [
          {
            "server": "[parameters('registryServer')]",
            "username": "[parameters('registryUsername')]",
            "password": "[parameters('registryPassword')]"
          }
        ],
        "ipAddress": {
          "type": "Public",
          "ports": [
            {
              "port": 3000,
              "protocol": "TCP"
            }
          ],
          "dnsNameLabel": "[concat(parameters('containerGroupName'), '-', uniqueString(resourceGroup().id))]"
        }
      }
    }
  ],
  "outputs": {
    "containerIPv4Address": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ContainerInstance/containerGroups/', parameters('containerGroupName'))).ipAddress.ip]"
    },
    "containerFQDN": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ContainerInstance/containerGroups/', parameters('containerGroupName'))).ipAddress.fqdn]"
    }
  }
}